<?php
/**
 * Custom module to restore users.
 */

/**
 * Include inc files.
 */
module_load_include('inc', 'users_cleanup', 'includes/users_cleanup.batch');
module_load_include('inc', 'user', 'user.admin');

/**
 * Implements hook_menu().
 */
function users_cleanup_menu() {
  $items = array();
  $items['admin/people/users_cleanup'] = array(
    'title' => 'Cleanup users',
    'page callback' => 'users_cleanup_page',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer users'),
  );

  return $items;
}

/**
 * Page callback.
 */
function users_cleanup_page() {
  $form_id = 'users_cleanup_form';
  if (!empty($_POST['accounts']) && isset($_POST['operation']) && ($_POST['operation'] == 'cancel')) {
    unset($_SESSION['matched_users']);
    $form_id = 'user_multiple_cancel_confirm';
  }
  return array('form' => drupal_get_form($form_id));
}

/**
 * Form builder function to allow choice of which batch to run.
 */
function users_cleanup_form($form, &$form_state) {
  $matched_users = $_SESSION['matched_users'];
  $testing_amount = variable_get('users_cleanup_testing_amount', 0);

  if (empty($matched_users)) {
    $form['description'] = array(
      '#type' => 'markup',
      '#markup' => t('User grabbing batch process.'),
    );

    $options = array(
      '' => t('Empty'),
      'batch_users_cleanup_name_equal_employee_id' => t('Name is equal to Employee id'),
    );

    $user_fields = field_info_instances('user');
    if (!empty($user_fields['user']['field_os2intra_import_timestamp'])) {
      $options['users_cleanup_name_by_import_timestamp'] = t('Timestamp is outdated');
    }
    $form['condition'] = array(
      '#type' => 'select',
      '#title' => t('Grabbing condition'),
      '#options' => $options,
      '#default_value' => 'unblock',
      '#required' => TRUE,
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Start',
    );
    return $form;
  }

  $options = array();
  $default_values = array();
  $destination = drupal_get_destination();

  $i = 0;
  foreach ($matched_users as $uid => $user) {
    $i++;
    if ($testing_amount && $i > $testing_amount) {
      break;
    }
    $option = array(
      'name' => $user['name'],
      'employee_id' => $user['employee_id'],
      'realname' => $user['first_name'] . ' ' . $user['last_name'],
      'mail' => $user['mail'],
      'last_login' => $user['login'],
      'import_timestamp' => $user['import_timestamp'],
      'operations' => array(
        'data' => array(
          '#type' => 'link',
          '#title' => t('edit'),
          '#href' => "user/" . $uid . "/edit",
          '#options' => array('query' => $destination),
        ),
      ),
    );

    // Mark user to delete if user didn't have login process yet.
    if ($user->login == 0) {
      $default_values[$uid] = TRUE;
      $options[$uid] = $option;
    }
    else {
      // Put unchecked users on top.
      $options = array($uid => $option) + $options;
    }
  }

  $header = array(
    'name' => t('Name'),
    'employee_id' => t('Employee id'),
    'realname' => t('Realname'),
    'mail' => t('Email'),
    'last_login' => t('Last login'),
    'import_timestamp' => t('Import timestamp'),
    'operations' => t('Operations'),
  );

  $form['description'] = array(
    '#type' => 'markup',
    '#markup' => t('You are going to cleanup @count users listed below.',
      array('@count' => count($options))),
  );

  $form['accounts'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#multiple' => TRUE,
    '#default_value' => $default_values,
  );

  // Here we are reusing bulk operation methods from admin/people page.
  $options = array();
  foreach (module_invoke_all('user_operations') as $operation => $array) {
    $options[$operation] = $array['label'];
  }
  $form['options']['operation'] = array(
    '#type' => 'select',
    '#title' => t('Operation'),
    '#title_display' => 'invisible',
    '#options' => $options,
    '#default_value' => 'unblock',
  );

  $form['cleanup'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  $form['reset'] = array(
    '#type' => 'submit',
    '#value' => 'Reset',
    '#submit' => array('users_cleanup_form_reset_submit'),
  );
  return $form;
}

/**
 * Validate handler.
 */
function users_cleanup_form_validate($form, &$form_state) {
  if (!empty($form_state['values']['condition'])) {
    if (!function_exists($form_state['values']['condition'])) {
      form_set_error('', t("Operation callback function doesn't found."));
    }
  }

  if (!empty($form_state['values']['cleanup'])) {
    user_admin_account_validate($form, $form_state);
  }
}

/**
 * Submit handler.
 */
function users_cleanup_form_submit($form, &$form_state) {
  if (isset($form_state['values']['condition'])) {
    $condition = $form_state['values']['condition'];
    if (strpos($condition, 'batch') !== FALSE) {
      batch_users_cleanup_grab($condition);
    }
    else {
      call_user_func($condition);
    }
  }

  if (isset($form_state['values']['cleanup'])) {
    unset($_SESSION['matched_users']);
    user_admin_account_submit($form, $form_state);
  }
}

/**
 * Reset submit handler.
 */
function users_cleanup_form_reset_submit($form, &$form_state) {
  unset($_SESSION['matched_users']);
}
