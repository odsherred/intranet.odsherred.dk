<?php
/**
 * @file
 * Code for the OS2Intra Outdated Flag feature.
 */

include_once 'os2intra_outdated_flag.features.inc';

/**
 * Implements hook_menu().
 */
function os2intra_outdated_flag_menu() {

  $items = array();

  $items['admin/config/os2intra_outdated_flag'] = array(
    'title' => 'OS2intra Outdated Flag settings',
    'description' => 'Settings regarding th OS2intra outdated flags module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os2intra_outdated_flag_admin_settings'),
    'access arguments' => array('administer os2intra_outdated_flag settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback for settings form.
 */
function os2intra_outdated_flag_admin_settings() {
  $form = array();

  $form['os2intra_outdated_flag_cron_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable auto outdating nodes'),
    '#default_value' => variable_get('os2intra_outdated_flag_cron_enable', FALSE),
    '#description' => t("Enable this to automatic autodate nodes which has an expire date."),
  );

  $form['os2intra_outdated_flag_cron_interval'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum time between cron update'),
    '#default_value' => variable_get('os2intra_outdated_flag_cron_interval', '+1 week'),
    '#description' => t("The minimum time between nodes are updated with oudated flags. See %url for format documentation. default is '+1 week'", array('%url' => 'http://www.php.net/manual/en/datetime.formats.relative.php')),
    '#element_validate' => array('os2intra_outdated_flag_form_validate_field'),
  );

  // Make an list of content types to select.
  $content_types = node_type_get_types();

  $form['vertical_settings_tab'] = array(
    '#type' => 'vertical_tabs',
    '#weight' => 0,
  );
  // Form element. It's a fieldset , "Toggle display"
  $form['os2intra_outdated_flag_content_types'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content Types'),
    '#collapsible' => TRUE,
    '#group' => 'vertical_settings_tab',
  );

  $checkbox_instances = array();

  foreach ($content_types as $content_type) {
    $checkbox_instances[$content_type->type] = $content_type->name;
  }

  $form['os2intra_outdated_flag_content_types']['os2intra_outdated_flag_content_types_expire_field'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Choose content types which can be flagged expired'),
    '#options' => $checkbox_instances,
    '#description' => t('Check or uncheck the respective fields'),
    '#default_value' => variable_get('os2intra_outdated_flag_content_types_expire_field', array()),
    '#group' => 'vertical_settings_tab',
  );

  $form = system_settings_form($form);
  $form['#submit'][] = 'os2intra_outdated_flag_admin_settings_build';

  return $form;
}

/**
 * Sublit callback for the admin settings form.
 *
 * Builds all fields on selected content types. Does NOT remove fields on
 * content types where expire have been removed.
 */
function os2intra_outdated_flag_admin_settings_build($form, &$form_state) {
  $content_types = variable_get('os2intra_outdated_flag_content_types_expire_field', array());

  foreach ($content_types as $content_type) {
    if (isset($content_type) && $content_type !== 0 &&
        !field_info_instance('node', 'field_os2intra_outdated_date', $content_type)) {
      $instance = array(
        'field_name' => 'field_os2intra_outdated_date',
        'bundle' => $content_type,
        'entity_type' => 'node',
        'label' => t('Expire date'),
        'description' => t('At this date, the content will be flagged expired.'),
        'required' => FALSE,
        'settings' => array(
          'default_value' => 'blank',
          'default_value2' => 'same',
          'default_value_code' => '',
          'default_value_code2' => '',
          'user_register_form' => FALSE,
        ),
      );
      field_create_instance($instance);
    }
  }
}

/**
 * Generic validate callback for the settings fields.
 */
function os2intra_outdated_flag_form_validate_field($element, &$form_state) {
  switch ($element['#name']) {
    case 'os2intra_outdated_flag_cron_interval':
      if (($timestamp = strtotime($element['#value'])) === FALSE || $timestamp <= time()) {
        form_error($element, t('Your interval %format format is incorrect.', array('%format' => $element['#value'])));
      }
      break;
  }
}

/**
 * Implements hook_flag_default_flags().
 */
function os2intra_outdated_flag_flag_default_flags() {

  // Find all content types which can expire. These are the same as types which
  // can be flagged expired.
  $content_types = variable_get('os2intra_outdated_flag_content_types_expire_field', array());

  $enabled_types = array();
  foreach ($content_types as $content_type) {
    if (isset($content_type) && $content_type !== 0) {
      $enabled_types[$content_type] = $content_type;
    }
  }
  $flags = array();
  // Exported flag: "Forældet".
  $flags['os2intra_flag_outdated'] = array(
    'content_type' => 'node',
    'title' => t('Forældet'),
    'global' => 1,
    'types' => $enabled_types,
    'flag_short' => t('Forældet'),
    'flag_long' => t('Angiv dette indhold som at være forældet'),
    'flag_message' => t('Indhold er angivet som forældet.'),
    'unflag_short' => t('Ikke forældet'),
    'unflag_long' => t('Angives dette indhold til at være ikke forældet.'),
    'unflag_message' => t('Indhold angivet som ikke forældet.'),
    'unflag_denied_text' => '',
    'link_type' => 'toggle',
    'roles' => array(
      'flag' => array(
        0 => 2,
        1 => 3,
      ),
      'unflag' => array(
        0 => 2,
        1 => 3,
      ),
    ),
    'weight' => 0,
    'show_on_form' => 0,
    'access_author' => 'others',
    'show_on_page' => 1,
    'show_on_teaser' => 0,
    'show_contextual_link' => 0,
    'i18n' => 0,
    'module' => 'os2intra_outdated_flag',
    'locked' => array(
      0 => 'name',
    ),
    'api_version' => 2,
  );
  return $flags;
}

/**
 * Implements hook_permission().
 */
function os2intra_outdated_flag_permission() {
  return array(
    'administer os2intra_outdated_flag settings' => array(
      'title' => t('Administer OS2intra outdated flags module'),
      'description' => t('Change settings for OS2intra outdated flags module'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function os2intra_outdated_flag_cron() {
  $time_last_run = variable_get('os2intra_outdated_flag_cron_last_run', 0);
  $interval = variable_get('os2intra_outdated_flag_cron_interval', '+1 week');
  $enable = variable_get('os2intra_outdated_flag_cron_enable', FALSE);

  if ($enable && ($time_last_run + strtotime($interval) - time()) <= time()) {

    // Cron is allowed. Do some processing.
    if ($flag = flag_get_flag('os2intra_flag_outdated')) {

      // Be sure we have some user. We are cron.
      $admin = user_load(0);

      $query = new EntityFieldQuery();

      // Get all nodes which has a field of field_os2intra_outdated_date which
      // are between last cron run and today.
      $result = $query
        ->entityCondition('entity_type', 'node')
        ->fieldCondition('field_os2intra_outdated_date', 'value', gmdate("Y-m-d H:i:s", $time_last_run), '>=')
        ->fieldCondition('field_os2intra_outdated_date', 'value', date("Y-m-d H:i:s"), '<=')
        ->execute();

      if (isset($result['node'])) {
        foreach ($result['node'] as $node) {
          if (!$flag->is_flagged($node->nid)) {
            // Flag this node if it isnt flagged already.
            $flag->flag('flag', $node->nid, $admin, TRUE);
          }
        }
      }
    }
    variable_set('os2intra_outdated_flag_cron_last_run', time());
  }
}
