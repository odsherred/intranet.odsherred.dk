<?php
/**
 * @file
 * Code for the OS2Intra User import feature.
 */

include_once 'os2intra_user_import.features.inc';
/**
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 * @copyright bellcom open source aps
 */

/**
 * Implements hook_menu()
 */
function os2intra_user_import_menu(){
  $items = array();

  $items['admin/config/os2intra/user_import'] = array(
    'title' => 'OS2Intra User import',
    'description' => 'Administer user import',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer os2intra user import'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -5,
  );

  $items['admin/config/os2intra/user_import/settings'] = array(
    'title' => 'Settings',
    'description' => 'Administer user import settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os2intra_user_import_settings'),
    'access arguments' => array('administer os2intra user import'),
  );

  $items['admin/config/os2intra/user_import/log'] = array(
    'title' => 'Log',
    'description' => 'View user import log',
    'page callback' => 'os2intra_user_import_log',
    'access arguments' => array('administer os2intra user import'),
  );

  $items['admin/config/os2intra/user_import/overview'] = array(
    'title' => 'Overview',
    'description' => 'View imported users',
    'page callback' => 'os2intra_user_import_overview',
    'access arguments' => array('administer os2intra user import'),
  );

  $items['useractivation'] = array(
    'title' => 'User activation',
    'page callback' => 'os2intra_user_import_activate',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function os2intra_user_import_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'edit_profile_user_profile_form') {
    if (!user_access('administer os2intra user import')) {
      $form['field_os2intra_import_groups']['#access'] = 0;
      $form['field_os2intra_employee_id']['#access'] = 0;
      $form['field_os2intra_termination_date']['#access'] = 0;
      $form['field_os2intra_department_ref']['#access'] = 0;
    }
  }
}

/**
 * User activation form
 */
function os2intra_user_import_activate_form($form_state){
  $form['employee_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Employee Id'),
  );

  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail adress'),
  );

  $form['birthday'] = array(
    '#type' => 'textfield',
    '#title' => t('Birthdate'),
    '#description' => t('Format: 10/03/1982'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Implements hook_form_validate()
 */
function os2intra_user_import_activate_form_validate($form, &$form_state){
  // Check if birthdate is valid format
  list($dd,$mm,$yyyy) = explode('/', $form_state['values']['birthday']);
  if(!checkdate($mm, $dd, $yyyy)){
    form_set_error('birthday', t('Birthdate: Invalid format.'));
  }

  // Check if employee id is valid
  $employee_id = (int)$form_state['values']['employee_id'];

  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'user');
  $query->fieldCondition('field_os2intra_employee_id', 'value', $employee_id, 'LIKE');
  $result = array_shift($query->execute());

  if(!$result){
    form_set_error('employee_id', t('Invalid employee id'));
  }
  else {
    $form_state['uid'] = key($result);
    $user = user_load($form_state['uid']);

    if(is_object($user)){
      if($user->mail){
        form_set_error('employee_id', t('Employee already activated'));
      }
      $birthday_field = field_get_items('user', $user, 'field_os2intra_birthday');
      $birthday = strtotime($birthday_field[0]['value']);
      $input_birthday = strtotime($yyyy . '-' . $mm . '-' . $dd);
      if($input_birthday !== $birthday){
        form_set_error('form', 'Please check your input.');
      }
    }
  }

  // Check if email address is valid
  if(!valid_email_address($form_state['values']['mail'])){
    form_set_error('mail', t('Invalid email address.'));
  }
}

/**
 * Implements hook_form_submit()
 */
function os2intra_user_import_activate_form_submit($form, &$form_state){

  $password = user_password(8);

  $change = array(
    'mail' => $form_state['values']['mail'],
    'pass' => $password
  );
  $user = user_load($form_state['uid']);

  user_save($user, $change);

  if(_user_mail_notify('register_no_approval_required', $user)){
    drupal_set_message(t('A mail has been sent to: ') . $form_state['values']['mail']);
  }
}

/**
 * Page callback for user activation
 */
function os2intra_user_import_activate(){
  return drupal_get_form('os2intra_user_import_activate_form');
}

/**
 * Implements hook_permission()
 */
function os2intra_user_import_permission(){
 return array(
    'administer os2intra user import' => array(
      'title' => t('Administer OS2Intra User import'),
      'description' => t('Perform administration tasks for user import.'),
    ),
  );
}

/**
 * Form callback for settings
 */
function os2intra_user_import_settings(){
  $csv_cols = array('none' => t('None'), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);

  $form['placeholder'] = array(
    '#type' => 'item',
    '#markup' => t('This module does not provide a cron hook. This has to be set up manually, by adding the import script to the crontab'),
  );

  $form['os2intra_user_import_enable'] = array(
    '#title' => t('Enable user import'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('os2intra_user_import_enable', FALSE)
  );

  $form['os2intra_user_import_dir'] = array(
    '#title' => t('Directory containing CSV with users'),
    '#type' => 'textfield',
    '#description' => t('ex. private://user_import'),
    '#default_value' => variable_get('os2intra_user_import_dir', 'private://user_import')
  );

  $form['mapping'] = array(
    '#type' => 'fieldset',
    '#title' => t('Mapping'),
    '#collapsible' => FALSE,
  );

  $form['mapping']['description'] = array(
    '#type' => 'item',
    '#markup' => t('Select columns in the CSV file corresponding to the data'),
  );

  $form['mapping']['os2intra_mapping_first_name'] = array(
    '#type' => 'select',
    '#title' => t('Firstname'),
    '#options' => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_first_name'),
  );

  $form['mapping']['os2intra_mapping_last_name'] = array(
    '#type' => 'select',
    '#title' => t('Lastname'),
    '#options' => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_last_name'),
  );

  $form['mapping']['os2intra_mapping_department'] = array(
    '#type' => 'select',
    '#title' => t('Department'),
    '#options' => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_department'),
  );

  $form['mapping']['os2intra_mapping_centre'] = array(
    '#type' => 'select',
    '#title' => t('Centre'),
    '#options' => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_centre'),
  );

  $form['mapping']['os2intra_mapping_employee_id'] = array(
    '#type' => 'select',
    '#title' => t('Employee id'),
    '#options' => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_employee_id'),
  );

  $form['mapping']['os2intra_mapping_job_description'] = array(
    '#type' => 'select',
    '#title' => t('Job description'),
    '#options' => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_job_description'),
  );

  $form['mapping']['os2intra_mapping_termination_date'] = array(
    '#type' => 'select',
    '#title' => t('Termination date'),
    '#options' => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_termination_date'),
  );

  $form['mapping']['os2intra_mapping_birthday'] = array(
    '#type' => 'select',
    '#title' => t('Birthday'),
    '#options' => $csv_cols,
    '#default_value' => variable_get('os2intra_mapping_birthday'),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_form_validate()
 */
function os2intra_user_import_settings_validate(&$form, &$form_state){
  $values = array();
  foreach($form_state['values'] as $field => $value){
    if(strstr($field, 'os2intra_mapping')){
      // If none is selected, throw error
      if($value == 'none'){
        form_set_error($field, t('Invalid selection'));
      }
      // If same column is selected twice throw error
      if(in_array($value, $values)){
        form_set_error($field, t('Cannot use column twice'));
      }

      $values[] = $value;
    }
  }
}

/**
 * Implements hook_form_ID_alter()
 */
function os2intra_user_import_form_user_login_alter(&$form, &$form_state, $form_id){
  // Add link for user activation to login form
  $form['activate_user'] = array(
    '#type' => 'item',
    '#markup' => l(t('Activate user'), 'useractivation'),
  );
}

/**
 * Page callback for log
 */
function os2intra_user_import_log(){
  try {
    $result = db_select('os2intra_user_import_log', 'l')
      ->fields('l')
      ->orderBy('created', 'DESC')
      ->execute()
      ->fetchAll();
  }
  catch (Exception $e) {
    $result = array();
  }

  foreach($result as $row){
    $rows[] = array($row->message, date('d-m-y H:i:s', $row->created));
  }

  $header = array(t('Message'), t('Date'));

  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Page callback for overview
 */
function os2intra_user_import_overview(){
  return views_embed_view('os2intra_user_import', 'block');
}

/**
 * User import wrapper function
 */
function os2intra_user_import_run(){
  if(variable_get('os2intra_user_import_enable', FALSE)){
    setlocale(LC_ALL, "en_DK.UTF-8");

    variable_get('os2intra_user_import_dir', 'private://user_import');

    $realpath = '';

    $dir = reset(file_scan_directory('private://user_import', '/.*\.csv$/'));
    if($dir){
      $realpath = drupal_realpath($dir->uri);
    }

    if(file_exists($realpath)){
      $file = file_get_contents($realpath);

      os2intra_user_import_clear_log();
      os2intra_user_import_save_log('', 'Starting import');
      // Parse file, map data accordingly
      $users = os2intra_user_import_process_file($file);

      // Check and create groups
      os2intra_user_import_groups($users);

      // Check for users that already exist
      $update_users = os2intra_user_import_check_users($users);

      os2intra_user_import_save_log('', 'User import');
      // Loop over users and create
      foreach($users as $user){
        os2intra_user_import_save_user($user);
      }

      // Update users
      foreach($update_users as $uid => $user){
        os2intra_user_import_save_user($user, $uid);
      }

      // Disable users
      os2intra_user_import_disable_users();

      // Logging
      os2intra_user_import_save_log('', 'User import finished');
      os2intra_user_import_save_log('', 'Import finished');
    }
  }
}

/**
 * Disable users according to termination date
 */
function os2intra_user_import_disable_users(){
  os2intra_user_import_save_log('', 'Start disabling users');
  $timestamp = strtotime('midnight tomorrow');

  // Query all users with termination date today.
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'user');
  $query->fieldCondition('field_os2intra_termination_date', 'value', $timestamp, '<');
  $query->fieldCondition('field_os2intra_termination_date', 'value', 1, '>');
  $query->propertyCondition('status', 1);
  $result = reset($query->execute());

  // Array holding new status for user
  $disable_array = array('status' => 0);

  // Disable users
  if(is_array($result)){
    foreach($result as $uid => $item){
      os2intra_user_import_save_log('', 'Disable uid: ' . $uid);
      user_save(user_load($uid), $disable_array);
    }
  }
  os2intra_user_import_save_log('', 'User disabling finished');
}

/**
 * Helper function to parse file contents to array with relevant info
 */
function os2intra_user_import_process_file($file){
  $data = str_getcsv($file, "\n"); //parse the rows

  // CSV field mapping
  // rewrite for settings page?
  $map = array(
    variable_get('os2intra_mapping_employee_id') => 'employee_id',
    variable_get('os2intra_mapping_first_name') => 'first_name',
    variable_get('os2intra_mapping_last_name') => 'last_name',
    variable_get('os2intra_mapping_department') => 'department',
    variable_get('os2intra_mapping_centre') => 'centre',
    variable_get('os2intra_mapping_job_description') => 'job_description',
    variable_get('os2intra_mapping_termination_date') => 'termination_date',
    variable_get('os2intra_mapping_birthday') => 'birthday',
  );

  // Load data from file
  foreach($data as $row_str){
    $row = str_getcsv($row_str, ",");

    // Parse mapping
    foreach($row as $key => $field){
      // If there is a mapping for the key
      if($map[$key]){
        $mapped_row[$map[$key]] = $field;
      }
    }
    $rows[] = $mapped_row;
  }

  // Skip first row, headers
  unset($rows[0]);
  return $rows;
}

/**
 * Check if the user is already created in the system
 */
function os2intra_user_import_check_users(&$users){
  $update_users = array();

  foreach($users as $key => $user){
    $employee_id = $user['employee_id'];

    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'user');
    $query->fieldCondition('field_os2intra_employee_id', 'value', $employee_id, '=');
    $result = $query->execute();

    // Unset users already created
    if($result){
      $update_users[key(array_shift($result))] = $user;

      unset($users[$key]);
    }

    if(!$user['first_name'] || !$user['employee_id']){
      unset($users[$key]);
    }
  }

  return $update_users;
}

/**
 * Create/update user
 * If a uid is sent the user will be updated, otherwise a new user will be created.
 * The user has multiple group connections, some ar form the import file, and some
 * are set manually in the system. In order to preserve the manually set groups we
 * save the imported values in field_os2intra_import_groups, we then diff this
 * field with og_user_node to find out what groups are set manually (the diff).
 * These are then readded to the users groups, along with the organisational groups
 * from the import file.
 * Group id 2 (Odsherred kommune) is a different story, all users should be
 * members of this group, and therefore we add it manually to all.
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 * @param
 *  user array from file parser
 *
 */
function os2intra_user_import_save_user($user, $uid = ''){
  // Load users account, if any
  $account = user_load($uid);

  $keep_groups = array();
  $no_import_groups = FALSE;
  // Load users values from account
  if(is_object($account)){
    $og_user_node = array();
    $import_groups = array();
    // Get a list of current group nids
    if ($og_user_node_field = field_get_items('user', $account, 'og_user_node')) {
      foreach ($og_user_node_field as $key => $field) {
        $og_user_node[$field['target_id']] = $field['target_id'];
      }
    }
    // And organisation and centre nid from last import
    if ($import_group_field = field_get_items('user', $account, 'field_os2intra_import_groups')) {
      foreach ($import_group_field as $key => $field) {
        $import_groups[$field['target_id']] = $field['target_id'];
      }
    }
    // The diff will be the groups the user should keep.
    if (!empty($import_groups)) {
      $keep_groups = array_diff($og_user_node, $import_groups);
      // Group id 2 is unset as we add this to all users later.
      unset($keep_groups[2]);
    }
    else {
      // Keep all groups, if there are no import groups
      $keep_groups = $og_user_node;
      $no_import_groups = TRUE;
    }
  }

  // Get node id for group
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->fieldCondition('field_os2intra_department_id', 'value', $user['department'], '=');
  $result = $query->execute();
  $new_group_nid = key(array_shift($result));

  // Attach new group.
  // We rebuild the association completely so we start with an empty
  // array.
  $user_groups = array();
  $user_groups[LANGUAGE_NONE][]['target_id'] = 2; // Everybody needs to memebers of this group.
  $user_groups[LANGUAGE_NONE][]['target_id'] = $new_group_nid;

  // In field_os2intra_import_groups we store the group ids
  // imported, for both organistation unit and center.
  // On the next import, we need this to find out what groups the
  // user has been added to, that are not organisational.
  $import_groups = array();
  $import_groups[LANGUAGE_NONE][]['target_id'] = $new_group_nid;

  // Get node id for centre
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->fieldCondition('field_os2intra_department_id', 'value', $user['centre'], '=');
  $result = $query->execute();
  if (!empty($result['node'])) {
    $centre_nid = key(array_shift($result));
    $user_groups[LANGUAGE_NONE][]['target_id'] = $centre_nid;
    // Dont do duplicates
    if ($new_group_nid !== $centre_nid) {
      $import_groups[LANGUAGE_NONE][]['target_id'] = $centre_nid;
    }
  }

  // If there are no import groups, we add the groups, the user had at import.
  // import groups will be set during this import, so next time, this should
  // not be an issue.
  // This is only done in order to migrate user groups, from users before the
  // import groups field was added.
  if ($no_import_groups) {
    $user_groups = array();
  }

  // Add back the groups we want to keep.
  foreach ($keep_groups as $group_id) {
    $user_groups[LANGUAGE_NONE][]['target_id'] = $group_id;
  }

  // Create unix timestamp for termination date
  // @todo: check that timestamp is not today
  $termination_date_timestamp = strtotime($user['termination_date']);
  // Check if the timestamp supplied from the import is larger than
  // what unix timestamps can be.
  if($termination_date_timestamp > 2147483647){
    $termination_date_timestamp = 1;
  }

  list($dd,$mm,$yyyy) = explode('-', $user['birthday']);
  $birthday = date('Y-m-d H:i:s', mktime(0, 0, 0, (int)$mm, (int)$dd, (int)$yyyy));
  // User title tid
  $title_tid = os2intra_user_import_user_title($user['job_description']);

  // Populate fields
  $fields = array(
    // Set employee_id
    'field_os2intra_employee_id' => array(LANGUAGE_NONE => array(0 => array('value' => $user['employee_id']))),
    // Set group membership
    'og_user_node' => $user_groups,
    // The organisational ids from this import
    'field_os2intra_import_groups' => $import_groups,
    // First Name
    'field_name_first' => array(LANGUAGE_NONE => array(0 => array('value' => $user['first_name']))),
    // Last Name
    'field_name_last' => array(LANGUAGE_NONE => array(0 => array('value' => $user['last_name']))),
    // Job description
    'field_os2intra_user_titles' => array(LANGUAGE_NONE => array(0 => array('tid' => $title_tid))),
    // Termination date
    'field_os2intra_termination_date' => array(LANGUAGE_NONE => array(0 => array('value' => $termination_date_timestamp))),
    // Birthday
    'field_os2intra_birthday' => array(LANGUAGE_NONE => array(0 => array('value' => $birthday))),
    // Activate user
    'status' => isset($account->status) ? $account->status : 1,
  );

  // Handle wether were updating or creating a new user
  // if were updating we dont generate username and set password
  if(!is_numeric($uid)){
    $password = user_password(8);

    // Generate username
    // Todo: make configurable
    $cln_first_name = preg_replace('/[^A-Za-z0-9\-]/', '', $user['first_name']);
    $cln_last_name = preg_replace('/[^A-Za-z0-9\-]/', '', $user['last_name']);
    $cln_department = preg_replace('/[^A-Za-z0-9\-]/', '', $user['department']);

    $username = strtolower(substr($cln_department, 0, 3)) . '-';
    $username .= strtolower(substr($cln_first_name, 0, 3));
    $username .= strtolower(substr($cln_last_name, 0, 3));

    $users_query = db_query('SELECT u.name FROM {users} u WHERE u.name LIKE :name', array(':name' => $username.'%'));
    $count = count($users_query->fetchAll());

    if($count){
      $username .= $count + 1;
    }

    $fields['name'] = $username;
    $fields['pass'] = $password;
  }

  // Save user
  user_save($account, $fields);

  // Write log entry
  if($uid){
    os2intra_user_import_save_log($user['employee_id'], 'update user: ' . $user['employee_id'] . ' ' . $user['first_name'] . ' ' . $user['last_name']);
  }
  else {
    os2intra_user_import_save_log($user['employee_id'], 'create user: ' . $user['first_name']);
  }
}

/**
 * Create groups for users
 *
 * @param
 *  array of users with groups
 */
function os2intra_user_import_groups($users){
  os2intra_user_import_save_log('', 'Import groups');

  $groups = array();

  foreach($users as $user){
    $groups[] = $user['department'];
  }

  $vocab = taxonomy_vocabulary_machine_name_load('os2intra_organizaiton_tax');
  $tree = taxonomy_get_tree($vocab->vid);

  // find first term with no parents
  // used as parent tid later
  foreach($tree as $term){
    if($term->parents[0] == 0){
      $parent_tid = $term->tid;
      break;
    }
  }

  foreach($groups as $group){
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'taxonomy_term');
    $query->fieldCondition('field_os2intra_department_id', 'value', $group, '=');
    $result = $query->execute();

    if(!empty($result)){
      os2intra_user_import_save_log('', 'Group already exits: ' . $group);
      continue;
    }

    // Create taxonomy terms
    os2intra_user_import_save_log('', 'Create group: ' . $group);
    $term = new stdClass();

    $term->name = $group;
    $term->parent = array($parent_tid);
    $term->field_os2intra_department_id[LANGUAGE_NONE][0]['value'] = $group;
    $term->vid = $vocab->vid;

    taxonomy_term_save($term);

    $tid = $term->tid;
    // Create group nodes

    $node = new stdClass();

    // Title and type
    $node->title = $group;
    $node->type = 'group';

    // Generic node stuff
    node_object_prepare($node);
    $node->language = LANGUAGE_NONE;
    $node->uid = 1;
    $node->status = 1;

    // Set organization term
    $node->field_os2intra_organization[LANGUAGE_NONE][0]['tid'] = $tid;

    // Save department id on node
    $node->field_os2intra_department_id[LANGUAGE_NONE][0]['value'] = $group;

    // Group type "Organisation"
    // Todo: make more generic
    $node->field_os2intra_grouptype[LANGUAGE_NONE][0]['tid'] = 6;

    // Closed group, require invitation
    $node->field_og_subscribe_settings[LANGUAGE_NONE][0]['value'] = 'invitation';

    $node = node_submit($node);

    node_save($node);
  }
  os2intra_user_import_save_log('', 'Finished importing groups');
}

/**
 * Save log message to db
 */
function os2intra_user_import_save_log($uuid, $message){
  try {
    db_insert('os2intra_user_import_log')
      ->fields(array(
        'uuid' => $uuid,
        'message' => $message,
        'created' => time(),
      ))
      ->execute();

    return true;

  }
  catch (PDOException $e ) {
    return false;
  }
}

/**
 * Clear log
 */
function os2intra_user_import_clear_log(){
  try {
    db_query('DELETE FROM {os2intra_user_import_log} WHERE 1')->execute();
    return true;

  }
  catch (PDOException $e ) {
    return false;
  }
}

/**
 * Helper for user title
 */
function os2intra_user_import_user_title($job_description){
  $term = reset(taxonomy_get_term_by_name($job_description));

  // Create new taxonomy term
  if(!is_object($term)){
    $vocab = taxonomy_vocabulary_machine_name_load('bruger_jobtitel');
    $term = new stdClass();

    $term->name = $job_description;
    $term->vid = $vocab->vid;

    taxonomy_term_save($term);
  }

  return $term->tid;
}
