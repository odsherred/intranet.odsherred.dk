<?php
/**
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 * @copyright bellcom open source aps
 */

/**
 * Include inc files
 */
module_load_include('inc', 'os2intra_user_import', 'includes/activation_form');
module_load_include('inc', 'os2intra_user_import', 'includes/csv_mapping');
module_load_include('inc', 'os2intra_user_import', 'includes/departments');
module_load_include('inc', 'os2intra_user_import', 'includes/log');
module_load_include('inc', 'os2intra_user_import', 'includes/mail');
module_load_include('inc', 'os2intra_user_import', 'includes/og_roles');
module_load_include('inc', 'os2intra_user_import', 'includes/settings_form');
module_load_include('inc', 'os2intra_user_import', 'includes/users');
module_load_include('inc', 'os2intra_user_import', 'includes/utilities');

/**
 * Implements hook_menu()
 */
function os2intra_user_import_menu() {
  $items = array();

  $items['admin/config/os2intra/user_import'] = array(
    'title'            => 'OS2Intra User import',
    'description'      => 'Administer user import',
    'page callback'    => 'system_admin_menu_block_page',
    'access arguments' => array('administer os2intra user import'),
    'file path'        => drupal_get_path('module', 'system'),
    'file'             => 'system.admin.inc',
    'weight'           => -5,
  );

  $items['admin/config/os2intra/user_import/settings'] = array(
    'title'            => 'Settings',
    'description'      => 'Administer user import settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('os2intra_user_import_settings'),
    'access arguments' => array('administer os2intra user import'),
    'file'             => 'includes/settings_form.inc',
  );

  $items['admin/config/os2intra/user_import/log'] = array(
    'title'            => 'Log',
    'description'      => 'View user import log',
    'page callback'    => 'os2intra_user_import_log',
    'access arguments' => array('administer os2intra user import'),
    'file'             => 'includes/log.inc',
  );

  $items['admin/config/os2intra/user_import/overview'] = array(
    'title'            => 'Overview',
    'description'      => 'View imported users',
    'page callback'    => 'os2intra_user_import_overview',
    'access arguments' => array('administer os2intra user import'),
  );

  $items['useractivation'] = array(
    'title'           => 'User activation',
    'page callback'   => 'os2intra_user_import_activate',
    'access callback' => TRUE,
    'file'            => 'includes/activation_form.inc',
  );

  $items['admin/config/os2intra/dwe'] = array(
    'title' => t('Departments without employees'),
    'description' => t('A list of departments without employees'),
    'page callback' => 'os2intra_user_import_departments_without_employees',
    'access arguments' => array('administer os2intra'),
  );

  return $items;
}

/**
 * Implements hook_permission()
 */
function os2intra_user_import_permission() {
  return array(
    'administer os2intra user import' => array(
      'title'       => t('Administer OS2Intra User import'),
      'description' => t('Perform administration tasks for user import.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function os2intra_user_import_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'edit_profile_user_profile_form') {
    if (!user_access('administer os2intra user import')) {
      $form['og_org_ref']['#access'] = 0;
      $form['field_os2intra_employee_id']['#access'] = 0;
      $form['field_os2intra_termination_date']['#access'] = 0;
    }
  }

  // Use os2intra_user_import_add_managers_to_departments() for submits
  if ($form_id == 'taxonomy_form_term') {
    if ($form['#term']['vocabulary_machine_name'] == 'os2intra_organizaiton_tax') {
      $form['#submit'][] = "os2intra_user_import_add_managers_to_departments";
    }
  }

  // Settings form
  if ($form_id == 'os2intra_settings_settings') {
    $form['os2intra_user_import_activate'] = array(
      '#type' => 'fieldset',
      '#title' => t('User activation'),
      '#collapsible' => TRUE,
    );

    $form['os2intra_user_import_activate']['activation_fields'] = array(
      '#type' => 'fieldset',
      '#title' => t('Validate first login by'),
    );

    $form['os2intra_user_import_activate']['activation_fields']['os2intra_user_import_activate_identification'] = array(
      '#title' => t('User identification'),
      '#type' => 'select',
      '#options' => array(
        'ad_id' => t('AD id'),
        'employee_id' => ('Employee number'),
      ),
      '#default_value' => variable_get('os2intra_user_import_activate_identification', 'employee_id'),
    );

    $form['os2intra_user_import_activate']['activation_fields']['os2intra_user_import_activate_birthday'] = array(
      '#title' => t('Birthday'),
      '#type' => 'checkbox',
      '#default_value' => variable_get('os2intra_user_import_activate_birthday', TRUE),
    );

    $form['os2intra_user_import_activate']['activation_fields']['os2intra_user_import_activate_email'] = array(
      '#title' => t('Email address'),
      '#type' => 'checkbox',
      '#default_value' => variable_get('os2intra_user_import_activate_email', TRUE),
    );
  }

  if ($form_id == 'user_login') {
    // Add link for user activation to login form
    $form['activate_user'] = array(
      '#type'   => 'item',
      '#markup' => l(t('Activate user'), 'useractivation'),
    );
  }
}

/**
 * Page callback for overview
 */
function os2intra_user_import_overview() {
  return views_embed_view('os2intra_user_import', 'block');
}

/**
 * User import wrapper function
 */
function os2intra_user_import_run_with_drush() {
  print_r("\r\n" . 'os2intra_user_import_run_with_drush' . "\r\n");
  
  if (variable_get('os2intra_user_import_enable', FALSE)) {
    // Check if import has run successfully in 1.5 day
    $last_import_epoch = variable_get('os2intra_user_import_epoch', time());
    if(!variable_get('os2intra_user_import_epoch')) {
      variable_set('os2intra_user_import_epoch', time());
    }
    if (time() > $last_import_epoch + 129600) {
      // Send mail
      $params = array(
        'subject' => t('1.5 day since last import'),
        'body' => 'Check if the import is running correctly.',
      );
      $to = variable_get('os2intra_user_notification_email', variable_get('site_mail'), 'drift@bellcom.dk');
      drupal_mail('os2intra_user_import', 'os2intra_user_notification_email', $to, language_default(), $params);
      os2intra_user_import_save_log('', 'Email about last import older than 1.5 days sent to: ' . $to );
    }
    setlocale(LC_ALL, "en_DK.UTF-8");
    $import_dir = variable_get('os2intra_user_import_dir', 'private://user_import');

    $realpath = '';

    $filename = variable_get('os2intra_user_import_file_name', 'FK-user_import');

    $dir = reset(file_scan_directory($import_dir, '/' . $filename . '.csv/'));
    if ($dir) {
      $realpath = drupal_realpath($dir->uri);
    }
    if (file_exists($realpath)) {
      // Uncomment this to get extensive debugging in the Drupal user import log in admin
      variable_set('os2intra_user_import_save_extended_log', TRUE);

      // Uncomment this if you want to force an import
      #variable_set('os2intra_user_import_epoch', time());

      $last_import_temp = variable_get('os2intra_user_import_epoch');
      $last_import_temp_groups = variable_get('os2intra_user_import_epoch_groups');
      $last_import_temp_users = variable_get('os2intra_user_import_epoch_users');
      $last_import_temp_users_disable = variable_get('os2intra_user_import_epoch_users_disable');
      os2intra_user_import_clear_log();
      os2intra_user_import_save_log('', 'Last registered import' . $last_import_temp);
      os2intra_user_import_save_log('', 'Starting import');

      // Parse file, map data accordingly
      $users = _os2intra_user_import_process_file($realpath);

       // Check and create groups
      if ($last_import_temp != $last_import_temp_groups or TRUE) {
        os2intra_user_import_save_log('', 'Starting groups. Last import different than the main import' . $last_import_temp . ' / ' . $last_import_temp_groups);
        os2intra_user_import_save_log('', 'Starting Group Import Loop');
        os2intra_user_import_groups($users);
        os2intra_user_import_save_log('', 'Ending Group Import Loop');
        variable_set('os2intra_user_import_epoch_groups', $last_import_temp);
        $last_import_temp_groups = variable_get('os2intra_user_import_epoch', time());
     } else {
        os2intra_user_import_save_log('', 'Skipping groups. Last import is the same as the running import' . $last_import_temp . ' / ' . $last_import_temp_groups);
     }
      // Check and create groups
      $user_email = array_column($users, 'email');

      $cemail = count(array_unique($user_email));
      $cusers = count($users);
      #error_log('Emails:  ' . print_r($user_email,true));
      #error_log('Users: ' . $cusers . ' Emails ' . $cemail);
      $dup_emails = array();
      $dup_id = array();

      if (count($users) !== count(array_unique($user_email))) {
         $dup_emails = array_unique(array_diff_assoc($user_email,array_unique($user_email)));
         os2intra_user_import_save_log('', 'Dublicate email found in import file  - Removing '. implode(', ', $dup_emails ));
        // variable_set('os2intra_user_import_epoch', time());
        // exit();
       }

        $user_id = array_column($users, 'ad_id');
       if (count($users) !== count(array_unique($user_id))) {
         $dup_id = array_unique(array_diff_assoc($user_id, array_unique($user_id)));
         os2intra_user_import_save_log('', 'Dublicate User id found in import file  - Removing '. implode(', ', $dup_id));
        // variable_set('os2intra_user_import_epoch', time());
        // exit();
       }
       // Check and update users
       if($last_import_temp != $last_import_temp_users or TRUE) {
         os2intra_user_import_save_log('', 'Starting User Loop');
         $update_users = os2intra_user_import_check_users($users, $dup_emails, $dup_id);
         // Loop over users and create
         os2intra_user_import_save_log('', 'Start Creating Users');
        foreach ($users as $user) {
           os2intra_user_import_save_user($user);
         }
        os2intra_user_import_save_log('', 'End Creating Users');
         // Update users
         os2intra_user_import_save_log('', 'Start Update Users');
         foreach ($update_users as $uid => $user) {
           os2intra_user_import_save_user($user, $uid);
         }

         os2intra_user_import_save_log('', 'End Update Users');
         os2intra_user_import_save_log('', 'Ending User Loop');
         variable_set('os2intra_user_import_epoch_users', $last_import_temp);
         $last_import_temp_users = variable_get('os2intra_user_import_epoch', time());
       } else
       {
         os2intra_user_import_save_log('', 'Skipping user update. Last import is the same as the running import' . $last_import_temp . ' / ' . $last_import_temp_users );
        }

      // Disable users
       if($last_import_temp != $last_import_temp_users_disable or TRUE) {
         os2intra_user_import_disable_users();
         os2intra_user_import_save_log('', 'End Disabeling Users');
         variable_set('os2intra_user_import_epoch_users_disable', $last_import_temp);
        $last_import_temp_users_disable = variable_get('os2intra_user_import_epoch', time());
      } else
      {
        os2intra_user_import_save_log('', 'Skipping user disable. Last import is the same as the running import' . $last_import_temp . ' / ' . $last_import_temp_users_disable );
      }

      // Logging
      //os2intra_user_import_save_log('', 'User import finished');
      os2intra_user_import_save_log('', 'Import finished');
      if (time() >= $last_import_epoch + 86400) {
         os2intra_user_import_save_log('', 'Last import updated changed - older than one day:');
         // Timestamp to check if import has run successfully
         variable_set('os2intra_user_import_epoch', time());
       } else
         os2intra_user_import_save_log('', 'Last import time NOT updated - under one day old');
       }
    else {
      os2intra_user_import_save_log('', 'File does not exist');
    }
  }

}
/**
 * Returns a list of all departments without users with role 14 and role 16
 */
function os2intra_user_import_departments_without_employees() {
    print_r("\r\n" . 'os2intra_user_import_departments_without_employees' . "\r\n");
  
  $departments_without_employees = array();
  $gid_arrays_with = array();
  $gid_arrays_without = array();
  $gids_with = array();
  $gids_without = array();

  // Select all distinct group ID's where role ID is 14 and 16
  $results_with = db_query('SELECT DISTINCT gid FROM og_users_roles WHERE rid=14 OR rid=16;');

  // Select all group ID's where role ID is not 14 and not 16
  $results_without = db_query('SELECT DISTINCT gid FROM og_users_roles WHERE rid != 14 AND rid != 16;');

  while ($result_with = $results_with->fetchAssoc()) {
    $gid_arrays_with[] = $result_with;
  }

  while ($result_without = $results_without->fetchAssoc()) {
    $gid_arrays_without[] = $result_without;
  }

  // Create array with group ID's for those with rid 14 and 16
  foreach ($gid_arrays_with as $key => $value) {
    foreach ($value as $key => $gid) {
      $gids_with[] = $gid;
    }
  }

  // Create array with group ID's for those without rid 14 and 16
  foreach ($gid_arrays_without as $key => $value) {
    foreach ($value as $key => $gid) {
      $gids_without[] = $gid;
    }
  }

  // Load all nodes
  $nids = array_diff($gids_without, $gids_with);
  $nodes = node_load_multiple($nids);

  // Loop through and return only ID's of type 'group' / department nodes
  foreach ($nodes as $node) {
    if ($node->type == 'group') {
      $node_link = '/node/' . $node->nid;
      $rows[] = array(
        l($node->nid, $node_link),
        l($node->title, $node_link),
        l(t('Edit'), $node_link . '/edit'),
      );
    }
  }

  // Return render array with NID and title
  $table['departments_without_employees'] = array(
    '#theme' => 'table',
    '#header' => array(t('ID'), t('Department'), t('Operations')),
    '#rows' => $rows,
  );

  return $table;
}
