<?php
/**
 * @file
 * Provide detenction of SSO cookie for cache bypass and autologin.
 */

// Helpers that need sharing.
require_once(dirname(drupal_get_filename('module', 'simplesamlphp_auth')) . '/simplesamlphp_auth.inc');

/**
 * Allow simpleSAMLphp SSO login attempt even on cached pages.
 */
function simplesamlphp_authboot_boot() {

  $cache_enabled = variable_get('cache', 1);
  $boot_cookie = variable_get('simplesamlphp_auth_cachebypass', FALSE);
  $boot_cookie_present = FALSE;

  if (($boot_cookie && isset($_COOKIE[$boot_cookie]) && $_COOKIE[$boot_cookie] != '')) {
    $boot_cookie_present = TRUE;
  }

  // Recreate beginning of simplesamlphp_auth_init().
  global $user;
  global $_simplesamlphp_auth_as;

  if (!_simplesamlphp_auth_isEnabled() && !$cache_enabled) {
    // Exit without initializing.
    return;
  }

  // Get the simplesamlphp session.
  $basedir = variable_get('simplesamlphp_auth_installdir', '/var/simplesamlphp');
  require_once($basedir . '/lib/_autoload.php');

  // Load simpleSAMLphp, configuration and metadata.
  $_simplesamlphp_auth_as = new SimpleSAML_Auth_Simple(variable_get('simplesamlphp_auth_authsource', 'default-sp'));

  // If not logged into Drupal.
  if ($user->uid == 0) {

    // If SSO cookie is present we want to restart uncached so simpleSAMLphp can take over.
    if ($boot_cookie_present) {
      // Log this bypass.
      watchdog('simplesamlphp_auth', 'Cache bypass login performed for %name.', array('%name' => $user->name));
      // Continue the bootstrap process.
      drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
      // Execute the page callback and exit.
      menu_execute_active_handler();
      // Send them back through Drupal again.
      $host = $_SERVER['HTTP_HOST'];
      $uri = $_SERVER['REQUEST_URI'];
      header("Location: http://$host$uri", TRUE, 301);
      drupal_exit();
    }
    else {
      // Nevermind, this person is totally anonymous or this feature isn't in use.
      return;
    }

  }
  else { // Logged into Drupal.

    // Force simpleSAMLphp login if Drupal and SSO is present, and this is turned on.
    // @todo: Merge this with the simplesamlphp_auth_loginpage function once dynamic redirect is in place.
    if ($boot_cookie_present && variable_get('simplesamlphp_auth_autologin')) {
      if ($_simplesamlphp_auth_as->isAuthenticated()) {
        $_simplesamlphp_auth_as->requireAuth();
      }
    }

  } // End user test.
}

/**
 * Provide some admin choices within SimpleSAMLphp Auth settings page.
 */
function simplesamlphp_authboot_form_simplesamlphp_auth_settings_alter(&$form, &$form_state, $form_id) {

  $form['simplesamlphp_auth_cachebypass'] = array(
    '#type' => 'textfield',
    '#title' => t('Cache bypass cookie'),
    '#default_value' => variable_get('simplesamlphp_auth_bootcookie', ''),
    '#description' => t('If this cookie it present, the user will be given a cache bypass cookie (at Drupal boot) and reloaded.
      This is useful for enabling auto-login even with performance caching turned on.'),
  );
  $form['simplesamlphp_auth_autologin'] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto LOGIN users with SSO cookie'),
    '#default_value' => variable_get('simplesamlphp_auth_bootcookie', 0),
    '#description' => t('If the "cache bypass cookie" is present, the system will attempt to automatically log them in.'),
  );
  $form['simplesamlphp_auth_autologout'] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto LOGOUT users without SSO cookie'),
    '#default_value' => variable_get('simplesamlphp_auth_autologin', 0),
    '#description' => t('If the "cache bypass cookie" is not present, the system will attempt to automatically log them out of Drupal. Useful if SAML session is not destroyed by other systems.'),
  );

}
  